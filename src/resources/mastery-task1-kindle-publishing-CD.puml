@startuml
class GetBookActivity {
- recommendationServiceClient : RecommendationsServiceClient
- catalogDao : CatalogDao

+execute(request : GetBookRequest) : GetBookResponse

}
class SubmitBookForPublishingActivity {
- publishingStatusDao : PublishingStatusDao

+execute(request : SubmitBookForPublishingRequest) : SubmitBookForPublishingResponse

}

class RemoveBookFromCatalogActivity {

+execute(removeBookFromCatalogRequest : RemoveBookFromCatalogRequest) : RemoveBookFromCatalogResponse

}
class RecommendationsServiceClient {

- recommendationsService : RecommendationsService

+ getBookRecommendations(genre : BookGenre) :  List<BookRecommendation>
}

class CatalogItemVersion {

 - @DynamoDBHashKey bookId : String
 - @DynamoDBRangeKey version : int
 - inactive : boolean
 - title : String
 - author : String
 - text : String
 - genre : BookGenre

+getBookId() : String

}

class PublishingStatusItem {

  - @DynamoDBHashKey publishingRecordId : String
  - @DynamoDBRangeKey status : PublishingRecordStatus
  - statusMessage : String
  - bookId : String

}

class CatalogDao {

- dynamoDbMapper : DynamoDBMapper
+ getBookFromCatalog(bookId : String) : CatalogItemVersion
+ getLatestVersionOfBook(bookId : String) : CatalogItemVersion

}

class PublishingStatusDao {

-publishingStatusDao : PublishingStatusDao
 - dynamoDbMapper : DynamoDBMapper

+ execute(request : SubmitBookForPublishingRequest) : SubmitBookForPublishingResponse

}

class BookNotFoundException {

 - serialVersionUID : long

}
GetBookActivity --> CatalogDao
GetBookActivity --> RecommendationsServiceClient
SubmitBookForPublishingActivity --> PublishingStatusDao
CatalogItemVersion  --> CatalogDao
PublishingStatusItem  --> PublishingStatusDao
CatalogDao --> BookNotFoundException

@enduml